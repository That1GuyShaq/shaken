
import axios from 'axios';
import { FormEventHandler,useState } from 'react';
import TextInput from '@/Components/TextInput';
import { Transition } from '@headlessui/react';
import InputError from '@/Components/InputError';
import InputLabel from '@/Components/InputLabel';
import PrimaryButton from '@/Components/PrimaryButton';
import { Link, useForm, usePage } from '@inertiajs/react';

import { User } from "@/types";
import { Input } from "@/Components/ui/input";
import { Label } from "@/Components/ui/label";
import { Badge } from '@/Components/ui/badge';
import { Button } from "@/Components/ui/button";
import { Card, CardHeader, CardTitle, CardContent, CardFooter, } from "@/Components/ui/card";
import { log } from 'console';


export default function UpdateProfileInformation({ className = '', user }: { className?: string; user: User }) {
    const [data, setData] = useState({
        first_name: user.first_name,
        last_name: user.last_name,
        email: user.email
    })
    const [errors, setErrors] = useState<{ [key: string]: string }>({});
    const [success, setSuccess] = useState(false);
    const [email, setEmail] = useState(user.email);
    const [processing, setProscessing] = useState(false);
    const [hasVerifiedEmail, setHasVerifiedEmail] = useState(true);
    // const { data, setData, patch, errors, recentlySuccessful } =
    //     useForm({
    //         first_name: user.first_name,
    //         last_name: user.last_name,
    //         email: user.email,
    //     });

    //     const { post } = useForm();

    const submit = () => {
        // e.preventDefault();

        setProscessing(true);

        setErrors({});
        setSuccess(false);

        axios.patch(route('profile.update'), {
            first_name: data.first_name,
            last_name: data.last_name,
            email: data.email
            },
            { headers: { 'Content-Type': 'application/json' }
            }).then(response => {
                console.log(response);
                if (response.data.hasVerifiedEmail) {
                    setSuccess(true);
                    setProscessing(false);
                    // setHasVerifiedEmail(response.data.hasVerifiedEmail);
                }
                setSuccess(true);
                setHasVerifiedEmail(response.data.hasVerifiedEmail);
            }).catch(error => {
                setErrors(error.response.data.errors);
                console.log(error.response.data.errors);
                setProscessing(false);
            })
        // post(route('profile.update'));
    };

    const { post: verifyEmailPost, processing: verifyEmailProcessing, recentlySuccessful: verifyEmailRecentlySuccessful } = useForm({});

    const submitVerifyEmail: FormEventHandler = (e) => {
        e.preventDefault();
        // verifyEmailPost(route('verification.send'));
        // console.log(verifyEmailRecentlySuccessful);
        axios.post(route('verification.send'), {
            // 'name'  : data.first_name + ' ' + data.last_name,
            // 'email' : data.email
            }).then(response => {
                console.log(response);
                // setMessages(prevMessages => [...prevMessages, { body: response.data, sender: 'system' }]);
            })
    };
    // const verifyEmail: FormEventHandler = (e) => {
    //     e.preventDefault();

        // axios.post(route('verification.send'), {
        // // 'name'  : data.first_name + ' ' + data.last_name,
        // // 'email' : data.email
        // }).then(response => {
        //     console.log(response);
        //     // setMessages(prevMessages => [...prevMessages, { body: response.data, sender: 'system' }]);
        // })
    // };

    return (
        <section className={className}>
            <Card>
                <CardHeader>
                    <CardTitle>Personal Details</CardTitle>
                </CardHeader>
                <CardContent>
                    <form className='grid auto-rows-min gap-4 md:grid-cols-12'>

                        <div className='grid w-full items-center gap-1.5 col-span-6'>
                            <Label htmlFor="first_name">First Name</Label>
                            <Input
                                id="first_name"
                                type="text"
                                name="first_name"
                                required
                                value={data.first_name}
                                autoComplete="first_name"
                                onChange={(e) => setData({ ...data, first_name: e.target.value })} />

                            <InputError message={errors['first_name']} className="mt-2" />
                        </div>

                        <div className='grid w-full items-center gap-1.5 col-span-6'>
                            <Label htmlFor="last_name">Last Name</Label>
                            <Input
                                id="last_name"
                                type="text"
                                name="last_name"
                                required
                                value={data.last_name}
                                autoComplete="last_name"
                                className='col-span-3'
                                onChange={(e) => setData({ ...data, last_name: e.target.value })} />

                            <InputError message={errors['last_name']} className="mt-2" />
                        </div>

                        <div className='grid w-full items-center gap-1.5 col-span-10'>
                            <Label htmlFor="email">Email</Label>
                            <Input
                                id="email"
                                type="email"
                                name="email"
                                required
                                value={data.email}
                                autoComplete="username"
                                className='col-span-6'
                                onChange={(e) => setData({ ...data, email: e.target.value })} />

                                <InputError message={errors['email']} className="mt-2" />

                                {!hasVerifiedEmail && (
                                    <Link href={route('verification.send')} method="post"
                                        className="rounded-md text-sm transition duration-300 hover:text-primary hover:ease-in-out"
                                    >
                                        Click here to re-send the verification email.
                                    </Link>
                                )}
                        </div>


                        <div className='flex justify-end w-full items-center col-span-2'>
                            <Badge variant={user.email_verified_at ? 'default' : 'secondary'}>
                                {user.email_verified_at ? 'Verified' : 'Unverified'}
                            </Badge>
                        </div>

                    </form>
                </CardContent>
                <CardFooter className='gap-4'>
                    <Button className='w-25' disabled={processing} onClick={submit} variant="default">Update personal Details</Button>
                    <Transition
                        show={success}
                        enter="transition ease-in-out"
                        enterFrom="opacity-0"
                        leave="transition ease-in-out"
                        leaveTo="opacity-0"
                    >
                        <p className="text-sm text-gray-600">
                            Saved.
                        </p>
                    </Transition>
                </CardFooter>
            </Card>

            {/* <header>
                <h2 className="text-lg font-medium"> Profile Information </h2>
                <p className="mt-1 text-sm"> Update your account's profile information and email address. </p>
            </header>

            <form onSubmit={submit} className="mt-6 space-y-6">
                <div className="grid w-full items-center gap-4">
                    <div className="flex flex-col space-y-1.5">
                    <Label htmlFor="email">Email</Label>
                    <Input
                        id="email"
                        type="email"
                        name="email"
                        required
                        value={data.email}
                        autoComplete="username"
                        onChange={(e) => setData('email', e.target.value)} />

                        <InputError message={errors.email} className="mt-2" />
                    </div>
                </div>
                <div>
                    <InputLabel htmlFor="name" value="Name" />

                    <TextInput
                        id="name"
                        className="mt-1 block w-full"
                        value={data.name}
                        onChange={(e) => setData('name', e.target.value)}
                        required
                        isFocused
                        autoComplete="name"
                    />

                    <InputError className="mt-2" message={errors.name} />
                </div>

                <div>
                    <InputLabel htmlFor="email" value="Email" />

                    <TextInput
                        id="email"
                        type="email"
                        className="mt-1 block w-full"
                        value={data.email}
                        onChange={(e) => setData('email', e.target.value)}
                        required
                        autoComplete="username"
                    />

                    <InputError className="mt-2" message={errors.email} />
                </div>

                {mustVerifyEmail && (
                    <div>
                        <p className="mt-2 text-sm text-gray-800">
                            Your email address is unverified.
                            <Link
                                href={route('verification.send')}
                                method="post"
                                as="button"
                                className="rounded-md text-sm text-gray-600 underline hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                            >
                                Click here to re-send the verification email.
                            </Link>
                        </p>
                        <Notification body={'A new verification link has been sent to your email address.'} trigger={status === 'verification-link-sent'} />
                    </div>
                )}

                <div className="flex items-center gap-4">
                    <PrimaryButton disabled={processing}>Save</PrimaryButton>

                    <Transition
                        show={recentlySuccessful}
                        enter="transition ease-in-out"
                        enterFrom="opacity-0"
                        leave="transition ease-in-out"
                        leaveTo="opacity-0"
                    >
                        <p className="text-sm text-gray-600">
                            Saved.
                        </p>
                    </Transition>
                </div>
            </form> */}
        </section>
    );
}
